import numpy as np
import pandas as pd
import math
from typing import List
import torch
from torch.utils.data import Dataset

def synthesize_bangladesh_tannery(n_samples=6000):
    rng = np.random.default_rng(2025)
    sites = [
        {"site":"Savar_CETP","lat":23.85,"lon":90.25},
        {"site":"Hazaribagh_Outlet","lat":23.72,"lon":90.41},
        {"site":"Buriganga_Upstream","lat":23.70,"lon":90.39},
        {"site":"Rural_Tannery","lat":24.0,"lon":90.15}
    ]
    
    rows = []
    for i in range(n_samples):
        site = rng.choice(sites)
        timestamp = pd.Timestamp("2018-01-01") + pd.Timedelta(hours=int(i * 4))
        doy = timestamp.dayofyear 
        
        season_multiplier = 1.0 + 0.5 * math.cos(2 * math.pi * (doy / 365.0 + 0.1)) 
        
        pH = float(np.clip(8.8 + rng.normal(0, 0.8), 5.5, 12.0))
        DO = float(np.clip(1.5 / season_multiplier + rng.normal(0, 0.8), 0.01, 8.0))
        
        BOD_base = 600 * season_multiplier
        COD_base = 1800 * season_multiplier
        TDS_base = 3000 * season_multiplier

        BOD = float(np.clip(BOD_base + rng.normal(0, BOD_base * 0.5), 10.0, 10000.0))
        COD = float(np.clip(COD_base + rng.normal(0, COD_base * 0.5), BOD + 10, 25000.0))
        TDS = float(np.clip(TDS_base + rng.normal(0, TDS_base * 0.4), 100.0, 12000.0))
        
        TSS = float(np.clip(BOD * 1.5 + rng.normal(0, 500), 10.0, 5000.0))
        conductivity = float(np.clip(TDS / (0.7 + rng.normal(0, 0.05)) + rng.normal(0, 200), 50.0, 30000.0))
        turbidity = float(np.clip(TSS * 1.5 + rng.normal(0, 500), 1.0, 5000.0))

        rows.append({
            "timestamp": timestamp,
            "site_id": site["site"],
            "lat": site["lat"],
            "lon": site["lon"],
            "pH": pH,
            "BOD": BOD,
            "COD": COD,
            "TDS": TDS,
            "DO": DO,
            "TSS": TSS,
            "conductivity": conductivity,
            "turbidity": turbidity
        })
        
    df = pd.DataFrame(rows)
    return df

def build_windows(df: pd.DataFrame, feature_cols: List[str], target_cols: List[str], window_size: int):
    X_list = []
    Y_list = []
    coords_list = []
    
    df_sorted = df.sort_values(["site_id","timestamp"]).reset_index(drop=True)

    for site, g in df_sorted.groupby("site_id"):
        g = g.sort_values("timestamp").reset_index(drop=True)
        if len(g) <= window_size:
            continue
            
        arr = g[feature_cols].values.astype(np.float32)
        targ = g[target_cols].values.astype(np.float32)
        lats = g["lat"].values
        lons = g["lon"].values
        
        for i in range(len(g) - window_size):
            win = arr[i:i+window_size]
            y = targ[i+window_size]
            
            lat = float(lats[i+window_size]) if not np.isnan(lats[i+window_size]) else 0.0
            lon = float(lons[i+window_size]) if not np.isnan(lons[i+window_size]) else 0.0
            
            X_list.append(win.T) 
            Y_list.append(y)
            coords_list.append([lat, lon])
        
    if len(X_list) == 0:
        return None, None, None
        
    X_arr = np.stack(X_list, axis=0)
    Y_arr = np.stack(Y_list, axis=0)
    coords_arr = np.stack(coords_list, axis=0).astype(np.float32)

    return X_arr, Y_arr, coords_arr
